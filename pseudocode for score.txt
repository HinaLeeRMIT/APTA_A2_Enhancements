initialise variable to 0 on turn start
if turn 0 at direction checker toggle variable

parse in variable for score check method 


scan left and right/up and down
add score until hits a null

private variables:
string startCoord;
string endCoord;
int score = 0;

scoreCheck(int direction, gameboard board, Tile initialTile, string initialCoord){
    totalTurnScore = 0;

    //setting start and end coords 
    setStartEndCoord();

    if (direction == 1){
        totalTurnScore += calcHori(tile initialTile);
        totalTurnScore += loopVerti(startCoord, endCoord)
    }
    else{
        totalTurnScore += calcVerti(tile initialTile);
        totalTurnScore += loopHori(startCoord, endCoord)
    }

    return totalTurnScore;
}

void setStartEndCoord(tile base){
    curr = base;
    while(curr.left != null){
        curr = curr.left;
    }
    startCoord = curr;

    //checking right side
    curr = base;
    while(base.right != null){
        curr = curr.right;
    }
    endCoord = curr;
}

int calcHori(tile base){
    int  tempScore = 0

    //checking left side
    curr = base;
    while(curr.left != null){
        curr = curr.left;
        score += curr.score;
    }

    //checking right side
    curr = base;
    while(base.right != null){
        curr = curr.right;
        score += curr.score;
    }

    currScore += tempScore;
    return currScore;
}

int calcVeri(tile base){
    int  tempScore = 0

    //checking upwards
    curr = base;
    while(curr.up != null){
        curr = curr.up;
        score += curr.score;
    }

    //checking downwards 
    curr = base;
    while(base.right != null){
        curr = curr.down;
        score += curr.down;
    }

    currScore += tempScore;
    return currScore;
}

int loopHori(startCoord, endCoord, currScore){
    int tempScore = 0;

    //creating a list of coordinates to loop through
    col = startCoord.letter;
    list = coordList;
    for (int i = startCoord.num, i < startCoord.num - endCoord.num, i++){
        string tempCoord = col + i;
        list.append(tempCoord);
    }

    //looping through the list
    for (i in coordList){
        if (i.up is not Null || i.down is not Null){
            tempscore += calcVerti(curr)
        }
    }

    return tempScore;
}

int loopVerti(startCoord, endCoord, currScore){
    int tempScore = 0;

    //creating a list of coordinates to loop through
    row = startCoord.num;
    list = coordList;
    for (int i = startCoord.letter.val, i < startCoord.letter.val - endCoord.letter.val, i++){
        string tempCoord = i.toString + row;
        list.append(tempCoord);
    }

    //looping through the list
    for (i in coordList){
        if (i.left is not Null || i.right is not Null){
            tempscore += calcHori(curr)
        }
    }

    return tempScore;
}







